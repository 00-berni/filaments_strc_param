INFO:__main__: Call the function `compute_correlation`
INFO:__main__: `diagonal_dist` parameter set to True
DEBUG:__main__: Copy the data and remove the mean
DEBUG:__main__: Compute all positions in the grid
DEBUG:__main__: pos : compilation time: 0.0040416717529296875 s
DEBUG:__main__: Compute all distances in the grid
DEBUG:__main__: dist : compilation time: 0.051361083984375 s
INFO:__main__: Compute the array with the unique distances
DEBUG:__main__: Compute each element
DEBUG:__main__: elem : compilation time: 0.07885169982910156 s
DEBUG:__main__: all_elm_shape = (524800,)
INFO:__main__: Compute the correlation
INFO:__main__: corr : compilation time: 0.004 m
DEBUG:__main__: Top 10 lines
#1: /home/bernardo/Scrivania/FISICA/ASTROFISICA/&Argomenti/Filaments/filaments_strc_param/tests/test_corr.py:47: 4.0041 MiB
    all_elem = np.concatenate([field[*all_pos[:,N]] * field[*all_pos[:,N:]] for N in range(all_pos.shape[1])])
#2: /home/bernardo/Scrivania/FISICA/ASTROFISICA/&Argomenti/Filaments/filaments_strc_param/tests/test_corr.py:33: 4.0040 MiB
    all_dist = np.concatenate([filpy.distance(all_pos[:,N],all_pos[:,N:]) for N in range(all_pos.shape[1])])
#3: /home/bernardo/Scrivania/FISICA/ASTROFISICA/&Argomenti/Filaments/filaments_strc_param/tests/test_corr.py:25: 0.0702 MiB
    all_pos = np.array([ (i,j) for i in range(field.shape[0]) for j in range(field.shape[1])]).T
#4: /home/bernardo/Scrivania/FISICA/ASTROFISICA/&Argomenti/Filaments/filaments_strc_param/tests/test_corr.py:22: 0.0079 MiB
    field = np.copy(field) - field.mean()
#5: /home/bernardo/Scrivania/FISICA/ASTROFISICA/&Argomenti/Filaments/filaments_strc_param/tests/test_corr.py:56: 0.0034 MiB
    correlations = np.array([np.sum(all_elem[all_dist == d]) for d in unq_dist])
#6: /home/bernardo/Scrivania/FISICA/ASTROFISICA/&Argomenti/Filaments/.venv/lib/python3.13/site-packages/numpy/lib/_arraysetops_impl.py:371: 0.0034 MiB
    ret = (aux[mask],)
#7: /home/bernardo/Scrivania/FISICA/ASTROFISICA/&Argomenti/Filaments/filaments_strc_param/filpy/stuff.py:158: 0.0005 MiB
    return np.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)
#8: /usr/lib/python3.13/logging/__init__.py:1602: 0.0005 MiB
    next_f = f.f_back
#9: /usr/lib/python3.13/logging/__init__.py:1778: 0.0003 MiB
    is_enabled = self._cache[level] = (
#10: <frozen genericpath>:175: 0.0001 MiB
DEBUG:__main__: Total allocated size: 8.0943 MiB
INFO:__main__: END
